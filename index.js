// Generated by IcedCoffeeScript 108.0.11
(function() {
  var ACache, CONFIG, LRU, LockTable, crypto, hash, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  LRU = require('kb-node-lru');

  LockTable = require('iced-utils').lock.Table;

  crypto = require('crypto');

  hash = require('object-hash');

  CONFIG = {
    HASH_LEN: 20,
    MAX_STRING_AS_KEY: 60
  };

  ACache = (function() {
    function ACache(_arg) {
      var max_age_ms, max_storage, size_fn;
      max_storage = _arg.max_storage, max_age_ms = _arg.max_age_ms, size_fn = _arg.size_fn;
      this._lru = new LRU({
        max_storage: max_storage,
        max_age_ms: max_age_ms
      });
      this._lock_table = new LockTable();
      this._counter = 0;
    }

    ACache.prototype.query = function(_arg, cb) {
      var ckey, err, fn, key_by, lock, res_array, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fn = _arg.fn, key_by = _arg.key_by;
      ckey = this._cacheKey(key_by);
      err = null;
      res_array = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/node-acache/index.iced",
            funcname: "ACache.query"
          });
          _this._lock_table.acquire(ckey, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return lock = arguments[0];
              };
            })(),
            lineno: 28
          }), true);
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if ((res_array = _this._lru.get(ckey))) {
              (function(__iced_k) {
                if (_this._counter++ % 100 === 0) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/chris/git/keybase/node-acache/index.iced",
                      funcname: "ACache.query"
                    });
                    process.nextTick(__iced_deferrals.defer({
                      lineno: 31
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/node-acache/index.iced",
                  funcname: "ACache.query"
                });
                fn(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return res_array = __slice.call(arguments, 1);
                    };
                  })(),
                  lineno: 33
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(err == null ? _this._lru.put(ckey, res_array) : void 0);
              });
            }
          })(function() {
            cb.apply(null, [err].concat(__slice.call(res_array)));
            return lock.release();
          });
        };
      })(this));
    };

    ACache.prototype.uncache = function(_arg) {
      var key_by;
      key_by = _arg.key_by;
      return this._lru.remove(this._cacheKey(key_by));
    };

    ACache.prototype._cacheKey = function(o) {
      if ((typeof o === 'string') && o.length <= CONFIG.MAX_STRING_AS_KEY) {
        return o;
      }
      if (typeof o === 'number') {
        return o;
      }
      return hash(o, {
        encoding: 'base64'
      }).slice(0, CONFIG.HASH_LEN);
    };

    return ACache;

  })();

  exports.ACache = ACache;

}).call(this);
